'''
Created on 03 dic 2015

@author: stefanopetrangeli
'''
import requests, json, logging, random
from orchestrator_core.config import Configuration
from orchestrator_core.userAuthentication import UserData
from orchestrator_core.controller import UpperLayerOrchestratorController
from nffg_library.nffg import NF_FG
from nffg_library.validator import ValidateNF_FG

#username = 'AdminPoliTO'
#password = 'AdminPoliTO'
#tenant = 'PoliTO_chain1'

username = 'admin'
password = 'admin'
tenant = 'admin_tenant'

conf = Configuration()

# set log level
if conf.DEBUG is True:
    log_level = logging.DEBUG
    requests_log = logging.getLogger("requests")
    requests_log.setLevel(logging.WARNING)
    sqlalchemy_log = logging.getLogger('sqlalchemy.engine')
    sqlalchemy_log.setLevel(logging.WARNING)
elif conf.VERBOSE is True:
    log_level = logging.INFO
    requests_log = logging.getLogger("requests")
    requests_log.setLevel(logging.WARNING)
else:
    log_level = logging.WARNING

log_format = '%(asctime)s %(levelname)s %(message)s - %(filename)s'

logging.basicConfig( filename="../"+conf.LOG_FILE, level=log_level, format=log_format, datefmt='%m/%d/%Y %I:%M:%S %p')
logging.debug("Script Starting")


#in_file = open("/home/stack/Documents/LiClipse Workspace/frog4/grafo0.json","r")
#in_file = open("/home/stack/Documents/LiClipse Workspace/frog4/grafo0_AR.json","r")
#in_file = open("/home/stack/Documents/LiClipse Workspace/frog4/grafo1.json","r")
in_file = open("../../frog4/grafo2.json","r")
in_file = open("../../frog4/grafo3_4vnf.json","r")
in_file = open("../../frog4/grafo_giacomo.json","r")
in_file = open("../../frog4/grafo_giacomo_Hy.json","r")
in_file = open("../../frog4/grafo_ODL_VLAN_Hy.json","r")

#in_file = open("../../frog4/UN/PhysicalPortsAndVNF-B.json","r")
#in_file = open("../../frog4/grafo_UN.json","r")
#in_file = open("../../frog4/grafo_provaUN.json","r")


#in_file = open("../../frog4/jolnet_graphHe_3endp.json")
#nf_fg_file = {"forwarding-graph":{"name":"Forwarding graph","id":"1","big-switch":{"flow-rules":[{"actions":[{"output_to_port":"vnf:00000001:inout:0"}],"id":"000000001_2","match":{"port_in":"endpoint:autogenerated_split_000000001"},"priority":2},{"actions":[{"output_to_port":"vnf:00000002:inout:0"}],"id":"000000003_2","match":{"port_in":"endpoint:autogenerated_split_000000003"},"priority":1},{"actions":[{"output_to_port":"endpoint:autogenerated_split_000000001"}],"id":"000000002_1","match":{"protocol":"tcp","port_in":"vnf:00000001:inout:0"},"priority":2},{"actions":[{"output_to_port":"endpoint:autogenerated_split_000000003"}],"id":"000000004_1","match":{"protocol":"udp","port_in":"vnf:00000002:inout:0"},"priority":1},{"actions":[{"output_to_port":"vnf:00000003:inout:0"}],"id":"000000005","match":{"protocol":"tcp","port_in":"vnf:00000001:inout:1"},"priority":2},{"actions":[{"output_to_port":"vnf:00000001:inout:1"}],"id":"000000006","match":{"protocol":"tcp","port_in":"vnf:00000003:inout:0"},"priority":1},{"actions":[{"output_to_port":"vnf:00000004:inout:0"}],"id":"000000007","match":{"protocol":"udp","port_in":"vnf:00000002:inout:1"},"priority":2},{"actions":[{"output_to_port":"vnf:00000002:inout:1"}],"id":"000000008","match":{"protocol":"udp","port_in":"vnf:00000004:inout:0"},"priority":1},{"actions":[{"output_to_port":"endpoint:00000002"}],"id":"000000009","match":{"protocol":"tcp","port_in":"vnf:00000003:inout:1"},"priority":2},{"actions":[{"output_to_port":"vnf:00000003:inout:1"}],"id":"000000010","match":{"protocol":"tcp","port_in":"endpoint:00000002"},"priority":1},{"actions":[{"output_to_port":"endpoint:00000002"}],"id":"000000011","match":{"protocol":"udp","port_in":"vnf:00000004:inout:1"},"priority":2},{"actions":[{"output_to_port":"vnf:00000004:inout:1"}],"id":"000000012","match":{"protocol":"udp","port_in":"endpoint:00000002"},"priority":1}]},"VNFs":[{"name":"Client function","id":"00000001","ports":[{"name":"data-port","id":"inout:0"},{"name":"data-port","id":"inout:1"}],"vnf_template":"example.json"},{"name":"Server function","id":"00000002","ports":[{"name":"data-port","id":"inout:0"},{"name":"data-port","id":"inout:1"}],"vnf_template":"example.json"},{"name":"Client function","id":"00000003","ports":[{"name":"data-port","id":"inout:0"},{"name":"data-port","id":"inout:1"}],"vnf_template":"example.json"},{"name":"Server function","id":"00000004","ports":[{"name":"data-port","id":"inout:0"},{"name":"data-port","id":"inout:1"},{"name":"data-port","id":"inout:2"}],"vnf_template":"example.json"}],"end-points":[{"name":"egress","id":"00000002","type":"internal"},{"id":"autogenerated_split_000000001","type":"gre-tunnel","gre-tunnel":{"gre-key":"1e26b67abee02ee882dd94d0e4d279c0","interface":"eth21","remote-ip":"10.0.0.1","local-ip":"10.0.0.2"}},{"id":"autogenerated_split_000000003","type":"gre-tunnel","gre-tunnel":{"gre-key":"a76fdd1540e2932c7daeab3d58d6ee06","interface":"eth21","remote-ip":"10.0.0.1","local-ip":"10.0.0.2"}}]}}

a= in_file.read()
nf_fg_file = json.loads(a)

ValidateNF_FG().validate(nf_fg_file)
nffg = NF_FG()
nffg.parseDict(nf_fg_file)


controller = UpperLayerOrchestratorController(user_data=UserData(username, password, tenant))
controller.put(nffg)
#controller.get(977)
#controller.getStatus(977)
#controller.delete(977)
#controller.delete(51)
#controller.delete(250)
#controller.delete(52)
#controller.delete(2)
#controller.delete(977)
#controller.delete(4)
#controller.delete("3_base")

print('Job completed')
exit()

orchestrator_endpoint = "http://127.0.0.1:9000/NF-FG/%s"
graph = "http://127.0.0.1:9000/NF-FG/2"
graph_status = "http://127.0.0.1:9000/NF-FG/status/4"
headers = {'Accept': 'application/json', 'Content-Type': 'application/json', 
           'X-Auth-User': username, 'X-Auth-Pass': password, 'X-Auth-Tenant': tenant}
#requests.put(orchestrator_endpoint % nffg.id, json.dumps(nf_fg_file), headers=headers)
#requests.delete(graph, headers=headers)
resp = requests.get(graph_status, headers=headers)
print(resp.text)

print('Job completed')
